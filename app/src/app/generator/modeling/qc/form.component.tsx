"use client";
import React, {useState} from "react";
import {Alert, Button, Divider, Form, Input, InputNumber, Select} from "antd";
import hero from "@/assets/heros/servercfg.png"
import {CopyOutlined, DownloadOutlined, MinusCircleOutlined, PlusOutlined} from "@ant-design/icons";
import Image from "next/image";

export default function FormComponent() {
    const [generated, setGenerated] = useState(false);
    const [toCopy,setToCopy] = useState("")

    async function generateFile(formData: any) {
        setGenerated(false);
        console.log(formData)
        let toGen = `// .QC file generated by physgun.ru tools\n`
        toGen += `\n// Основные\n`
        toGen += `$modelname "${formData["modelname"]}"\n`
        toGen += `$model "${formData["model"]}"\n`
        toGen += `$cdmaterials "${formData["cdmaterials"]}"\n`
        toGen += `$surfaceprop "${formData["surfaceprop"]}"\n`

        toGen += `\n// Анимации\n`

        if ("sequences" in formData && formData["sequences"] !== undefined && formData["sequences"].length > 0)
            formData["sequences"].map((seq:any) => {
                toGen += `$sequence "${seq["name"]}"  "${seq["path"]}"${seq["cycle"] == 1 ? " loop" : ""} fps ${seq["fps"]}.00\n`
            })

        toGen += `$collisionmodel "${formData["collisionmodel"]}"
{
\t$concave
\t$mass ${formData["collisionmodel.mass"]}.0
}\n`

        toGen += `\n// Боди-группы\n`
        if ("bodygroups" in formData && formData["bodygroups"] !== undefined && formData["bodygroups"].length > 0)
            formData["bodygroups"].map((seq:any) => {
                toGen += `$bodygroup "${seq["name"]}"
{
\tstudio "${seq["path"]}"
}\n`
            })
        toGen += `\n// Другие настройки\n`
        if ("scale" in formData && formData["scale"] !== undefined && formData["scale"] > 0)
            toGen += `$scale ${formData["scale"]/100}\n`

        setToCopy(toGen)
        setGenerated(true);
    }

    const textWithBreaks = toCopy
        .replace(/"([^"]+)"/g, '<span class="text-yellow-100">$&</span>')
        .replace(/\/\/(.*)/g, '<span class="text-neutral-600">//$1</span>')

        .split('\n').map((text, index) => (
        <React.Fragment key={index}>
            <div dangerouslySetInnerHTML={{__html:text}}/>
        </React.Fragment>
    ));

    const downloadCfgFile = () => {
        const element = document.createElement("a");
        const file = new Blob([toCopy], {type: 'text/plain'});
        element.href = URL.createObjectURL(file);
        element.download = "config.qc";
        document.body.appendChild(element); // Required for this to work in FireFox
        element.click();
    }

    return (
        <>
            <Form
                name="qc.file"
                initialValues={{ remember: true }}
                autoComplete="off"
                onFinish={generateFile}
                layout="vertical"
            >
                <Divider className={"my-3"} orientation="left">Базовая настройка</Divider>
                <div className="grid grid-cols-3 gap-3 w-full">
                    <Form.Item extra={"Параметр, который должен присутствовать в любом QC файле и желательно в самой первой строке. Он определяет имя и путь до модели."} className={"flex-1"} label={"Название модели"} name={'modelname'} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]}>
                        <Input size={"large"} className={"flex-1 w-full"} placeholder="physgun/models/test.mdl" />
                    </Form.Item>
                    <Form.Item extra={"Параметр, указывающий какой SMD исходник использовать для компиляции модели."} className={"flex-1"} label={"Путь к модели"} name={'model'} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]}>
                        <Input size={"large"}  placeholder="test.smd" />
                    </Form.Item>
                    <Form.Item extra={"Параметр, отвечающий за поиск моделью текстур, которые используются на ней. Здесь указываются пути до папок, в которых будет производится поиск."} className={"flex-1"} label={"Путь к материалам"} name={'cdmaterials'} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]}>
                        <Input size={"large"} placeholder="models\physgun\test" />
                    </Form.Item>
                    <Form.Item extra={"Параметр, отвечающий за \"свойства\" материала, из которого сделана модель."} className={"flex-1"} label={"Тип материала"} name={'surfaceprop'} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]}>
                        <Select
                            placeholder={"Тип материала"}
                            rootClassName={"flex-1"}
                            size={"large"}
                            options={[
                                { value: "concrete", label: 'Бетон' },
                                { value: "dirt", label: 'Грязь' },
                                { value: "metal", label: 'Металл' },
                                { value: "wood", label: 'Дерево' },
                                { value: "grate", label: 'Решетка' },
                                { value: "glass", label: 'Стекло' },
                                { value: "tile", label: 'Плитка' },
                                { value: "carpet", label: 'Ковер' },
                                { value: "computer", label: 'Компьютер?' },
                                { value: "plastic", label: 'Пластик' },
                                { value: "slush", label: 'Грязь' },
                                { value: "water", label: 'Вода' },
                                { value: "default", label: 'По умолчанию' }
                            ]}
                        />
                    </Form.Item>
                    <Form.Item extra={"Модель колизии должна состоять из минимального кол-ва мешей, они обязательно должны быть замкнутыми (вроде куба) и иметь на ВСЮ модель только 1 группу сглаживания."} className={"flex-1"} label={"Модель колизии"} name={'collisionmodel'} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]}>
                        <Input size={"large"} placeholder="test_col.smd" />
                    </Form.Item>
                    <Form.Item extra={"Вес модели в килограммах. По Wiki это \"типа\" килограммы, но на деле в игре 100/200 игрок поднимает как пушинку. Для основательных моделей советую прописывать вес от 300 и более."} className={"flex-1"} label={"Вес"} name={'collisionmodel.mass'} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]}>
                        <InputNumber min={1} max={300} size={"large"} style={{width: "100%"}} placeholder="300" />
                    </Form.Item>
                </div>
                <Divider className={"my-3"} orientation="left">Анимации</Divider>
                <Form.List
                    name="sequences"
                >
                    {(fields, { add, remove }, { errors }) => (
                        <div className={"inline-grid grid-cols-2 gap-3 w-full"}>
                            {fields.map((field, index) => (
                                <Form.Item
                                    required={false}
                                    key={field.key}
                                    className={""}
                                >
                                    <div className="flex flex-col gap-2 bg-neutral-800 p-2 rounded-md">
                                        <Form.Item {...field} name={[index, 'name']} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]} noStyle>
                                            <Input size={"large"} placeholder="Название анимации (idle)" />
                                        </Form.Item>
                                        <Form.Item {...field} name={[index, 'path']} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]} noStyle>
                                            <Input size={"large"} placeholder="Путь к анимации (anims/idle.mdl)" />
                                        </Form.Item>

                                        <div className="flex flex-row gap-2">
                                            <Form.Item rootClassName={"flex-1"} {...field} name={[index, 'cycle']}  validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]} noStyle>
                                                <Select
                                                    placeholder={"Зациклить анимацию?"}
                                                    rootClassName={"flex-1"}
                                                    size={"large"}
                                                    options={[
                                                        { value: 0, label: 'Нет' },
                                                        { value: 1, label: 'Да' },
                                                    ]}
                                                />
                                            </Form.Item>
                                            <Form.Item rootClassName={"flex-1"} {...field} name={[index, 'fps']} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]} noStyle>
                                                <InputNumber min={1} max={999} size={"large"} placeholder="FPS анимации" rootClassName={"flex-1"} />
                                            </Form.Item>
                                        </div>
                                        <Button
                                            danger={true}
                                            type="primary"
                                            onClick={() => remove(field.name)}
                                            icon={<MinusCircleOutlined />}
                                        >
                                            Удалить
                                        </Button>
                                    </div>


                                </Form.Item>
                            ))}
                            <Form.Item>
                                <Button
                                    type="dashed"
                                    onClick={() => add()}
                                    style={{ height: 165, width: "100%" }}
                                    icon={<PlusOutlined />}
                                >
                                    Добавить
                                </Button>
                                <Form.ErrorList errors={errors} />
                            </Form.Item>
                        </div>
                    )}
                </Form.List>
                <Divider className={"my-3"} orientation="left">Боди-группы</Divider>
                <Form.List
                    name="bodygroups"
                >
                    {(fields, { add, remove }, { errors }) => (
                        <div className={"inline-grid grid-cols-2 gap-3 w-full"}>
                            {fields.map((field, index) => (
                                <Form.Item
                                    required={false}
                                    key={field.key}
                                    className={""}
                                >
                                    <div className="flex flex-col gap-2 bg-neutral-800 p-2 rounded-md">
                                        <Form.Item {...field} name={[index, 'name']} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]} noStyle>
                                            <Input size={"large"} placeholder="Название боди группы (some)" />
                                        </Form.Item>
                                        <Form.Item {...field} name={[index, 'path']} validateTrigger={['onChange', 'onBlur']} rules={[{required: true,message: "Необходимо заполнить данное поле.",},]} noStyle>
                                            <Input size={"large"} placeholder="Путь к модели (bodygroups/some.mdl)" />
                                        </Form.Item>
                                        <Button
                                            danger={true}
                                            type="primary"
                                            onClick={() => remove(field.name)}
                                            icon={<MinusCircleOutlined />}
                                        >
                                            Удалить
                                        </Button>
                                    </div>


                                </Form.Item>
                            ))}
                            <Form.Item>
                                <Button
                                    type="dashed"
                                    onClick={() => add()}
                                    style={{ height: 140, width: "100%" }}
                                    icon={<PlusOutlined />}
                                >
                                    Добавить
                                </Button>
                                <Form.ErrorList errors={errors} />
                            </Form.Item>
                        </div>
                    )}
                </Form.List>
                <Divider className={"my-3"} orientation="left">Другие настройки</Divider>
                <div className="grid grid-cols-3 gap-3 w-full">
                    <Form.Item extra={"Параметр отвечающий за размер модели. Если вам лень переделывать модель, можно добавить этот параметр и насильно увеличить или уменьшить модель во время компиляции."} className={"flex-1"} label={"Размер модели"} name={'scale'}>
                        <InputNumber min={1} max={100} size={"large"} suffix={"%"} style={{width: "100%"}} placeholder="100" />
                    </Form.Item>
                </div>
                <div className="flex flex-row-reverse">
                    <Form.Item className={"m-0 p-0"}>
                        <Button type="primary" htmlType="submit" size={"large"} className={"bg-blue-600"}>
                            Создать конфиг
                        </Button>
                    </Form.Item>
                </div>
            </Form>
            {generated &&
                <div className="flex flex-col bg-neutral-950 rounded-lg mt-5 p-5 gap-5">
                    <Alert message="Ваш файл успешно создан!" type="success" showIcon />
                    <div className="flex flex-col text-neutral-400">
                        {textWithBreaks}
                    </div>
                    <div className="flex flex-row-reverse gap-2">
                        <Button onClick={() => {downloadCfgFile()}} type="dashed" icon={<DownloadOutlined />} size={"large"} />
                        <Button onClick={() => {navigator.clipboard.writeText(toCopy)}} type="dashed" icon={<CopyOutlined />} size={"large"} />
                    </div>
                </div>
            }
        </>
    );
}