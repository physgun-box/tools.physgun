"use client";
import React, {useState} from "react";
import {Alert, Button, Divider, Form, Input, InputNumber, Select} from "antd";
import {CopyOutlined} from "@ant-design/icons";

type IFields = {
    name?: string;
    id?: string;
    price?: number;
    term?: string;
    desc?: string;
    stackable?: number; // Same bool but 0 - false, 1 - true
    cagtegory?: string;
    icon?: string;
    discount?: number;
    hidden?: number; // Same bool but 0 - false, 1 - true;
    darkrp_item?: string;
    image?: string;
    global_limit?: number;
    local_limit?: number;
    weapon?: string;
    global?: number; // Same bool but 0 - false, 1 - true;
    usergroup?: string;
    pl_model?: string;
    type_admin?: number;
    darkrp_money: number;

};

export default function FormComponent() {
    const [generated, setGenerated] = useState(false);
    const [toCopy,setToCopy] = useState("")
    const [itemType,setItemType] = useState(0);
    async function generateFile(formData: IFields) {
        let prepareString = `-- Product generated by physgun.ru tools.\nIGS("${formData.name}", "${formData.id}")\n`;
        prepareString += `:SetPrice(${formData.price})\n`;
        prepareString += `:SetTerm(${formData.term})\n`;

        if ("desc" in formData && formData.desc != undefined)
            prepareString += `:SetDescription("${formData.desc}")\n`;

        if ("icon" in formData && formData.icon != undefined)
            prepareString += `:SetIcon("${formData.icon}")\n`;

        if ("image" in formData && formData.image != undefined)
            prepareString += `:SetImage("${formData.image}")\n`;

        if (formData.hidden === 1)
            prepareString += `:SetHidden(true)\n`;

        if (formData.stackable === 1)
            prepareString += `:SetStackable(true)\n`;

        if ("category" in formData && formData.category != undefined)
            prepareString += `:SetCategory("${formData.category}")\n`;

        if (formData.global === 1)
            prepareString += `:SetGlobal(true)\n`;

        switch (itemType) {
            default:
                switch (formData.type_admin) {
                    default:
                        prepareString += `:SetULXGroup("${formData.usergroup}")\n`;
                        break;
                    case 1:
                        prepareString += `:SetBAdminGroup("${formData.usergroup}")\n`;
                        break;
                    case 2:
                        prepareString += `:SetXAdminGroup("${formData.usergroup}")\n`;
                        break;
                    case 3:
                        prepareString += `:SetXAdmin2Group("${formData.usergroup}")\n`;
                        break;
                    case 4:
                        prepareString += `:SetEvolveRank("${formData.usergroup}")\n`;
                        break;
                    case 5:
                        prepareString += `:SetFAdminGroup("${formData.usergroup}")\n`;
                        break;
                    case 6:
                        prepareString += `:SetSGGroup("${formData.usergroup}")\n`;
                        break;
                    case 7:
                        prepareString += `:SetSAMGroup("${formData.usergroup}")\n`;
                        break;
                }
                break;
            case 1:
                prepareString += `:SetDarkRPItem("${formData.darkrp_item}")`;
                break;
            case 2:
                prepareString += `:SetPlayerModel("${formData.pl_model}")`;
                break;
            case 3:
                prepareString += `:SetInfAmmo()`;
                break;
            case 4:
                prepareString += `:SetWeapon("${formData.weapon}",9999)`;
                break;
        }

        setGenerated(false);
        setToCopy(prepareString)
        setGenerated(true);
    }

    const textWithBreaks = toCopy
        .replace(/"([^"]+)"/g, '<span class="text-yellow-100">$&</span>')
        .replace(/--(.*)/g, '<span class="text-neutral-600">--$1</span>').split('\n').map((text, index) => (
            <React.Fragment key={index}>
                <div dangerouslySetInnerHTML={{__html:text}}/>
            </React.Fragment>
        ));

    const downloadBatFile = () => {
        const element = document.createElement("a");
        const file = new Blob([toCopy], {type: 'text/plain'});
        element.href = URL.createObjectURL(file);
        element.download = "resources.lua";
        document.body.appendChild(element); // Required for this to work in FireFox
        element.click();
    }

    return (
        <>
            <Form
                name="server.cfg"
                initialValues={{ remember: true }}
                autoComplete="off"
                onFinish={generateFile}
                layout="vertical"
            >
                <Divider className={"my-3"} orientation="left">Базовая настройка</Divider>
                <div className="flex flex-row gap-6 w-100">
                    <Form.Item<IFields>
                        label="Название"
                        name="name"
                        className={"flex-1"}
                        extra="Чтобы продать нужно превлечь, напишите краткое но красивое название"
                        rules={[{ required: true, message: 'Пожалуйста введите название продукта!' }]}
                    >
                        <Input size={"large"} />
                    </Form.Item>

                    <Form.Item<IFields>
                        label="Системный ид предмета"
                        name="id"
                        extra="Тут все просто, ид должен быть уникальный и не должен повторятся, также должен быть на англ. языке к примеру item_donate_shit"
                        rules={[{ required: true, message: 'Пожалуйста введите ID продукта!' }]}
                        className={"flex-1"}
                    >
                        <Input size={"large"} />
                    </Form.Item>
                    <Form.Item<IFields>
                        label="Цена за еденицу"
                        name="price"
                        extra="Ооох, ну проверим ваши еврейские корни"
                        className={"flex-1"}
                        rules={[{ required: true, message: 'Пожалуйста введите цену за еденицу' }]}
                    >
                        <InputNumber min={0} max={99999} size={"large"} suffix={"руб"}  style={{width: "100%"}} />
                    </Form.Item>
                </div>
                <div className="flex flex-row gap-6 w-100">
                    <Form.Item<IFields>
                        label="Время действия"
                        name="term"
                        className={"flex-1"}
                        extra="С момента покупки начнется отсчет в сутках, если хотите чтобы предмет был штучный (активировал и забыл) введите значение 0"
                        rules={[{ required: true, message: 'Необходимо заполнить данный пункт' }]}
                    >
                        <InputNumber min={0} max={4096} size={"large"} suffix={"день(ей)"}  style={{width: "100%"}} />
                    </Form.Item>

                    <Form.Item<IFields>
                        label="Описание"
                        name="desc"
                        extra="Тут ваша фантазия, пишите что хотите."
                        className={"flex-1"}
                        rules={[{ required: true, message: 'Необходимо заполнить данный пункт' }]}
                    >
                        <Input size={"large"} />
                    </Form.Item>
                    <Form.Item<IFields>
                        label="Категория"
                        name="cagtegory"
                        extra="Тут необходимо ввести название категории данного предмета, чтобы можно было использовать фильтры в меню доната."
                        className={"flex-1"}
                        rules={[{ required: true, message: 'Необходимо заполнить данный пункт' }]}
                    >
                        <Input size={"large"} />
                    </Form.Item>
                </div>
                <div className="flex flex-row gap-6 w-100">
                    <Form.Item<IFields>
                        label="Возможность покупки"
                        name="stackable"
                        className={"flex-1"}
                        extra="Разрешить или запретить покупку предмета снова если он уже куплен у пользователя"
                        rules={[{ required: true, message: 'Необходимо заполнить данное поле' }]}
                    >
                        <Select
                            size={"large"}
                            options={[
                                { value: 0, label: 'Только один раз' },
                                { value: 1, label: 'Хоть сколько' },
                            ]}
                        />
                    </Form.Item>
                    <Form.Item<IFields>
                        label="Отображение в меню"
                        name="hidden"
                        className={"flex-1"}
                        extra="Нужно ли спрятать данный предмет в меню доната?"
                        rules={[{ required: true, message: 'Необходимо заполнить данное поле' }]}
                    >
                        <Select
                            size={"large"}
                            options={[
                                { value: 0, label: 'Показать' },
                                { value: 1, label: 'Скрыть' },
                            ]}
                        />
                    </Form.Item>
                    <Form.Item<IFields>
                        label="Глобальная покупка"
                        name="global"
                        className={"flex-1"}
                        extra="Если у вас несколько серверов, то можно сделать покупку этого предмета не только на одном сервере, но и на нескольких."
                        rules={[{ required: true, message: 'Необходимо заполнить данное поле' }]}
                    >
                        <Select
                            size={"large"}
                            options={[
                                { value: 0, label: 'Нет' },
                                { value: 1, label: 'Да' },
                            ]}
                        />
                    </Form.Item>
                </div>
                <div className="flex flex-row gap-6 w-100">
                    <Form.Item<IFields>
                        label="Иконка"
                        name="icon"
                        extra="Вы можете указать иконку предмета, вставьте сюда либо .mdl путь до предмета, либо web-ссылку на картинку к примеру example.com/image.png"
                        className={"flex-1"}
                    >
                        <Input size={"large"} />
                    </Form.Item>
                    <Form.Item<IFields>
                        label="Баннер"
                        name="image"
                        extra="Вы можете указать баннер предмета, вставьте сюда либо .mdl путь до предмета, либо web-ссылку на картинку к примеру example.com/image.png"
                        className={"flex-1"}
                    >
                        <Input size={"large"} />
                    </Form.Item>
                </div>
                <Divider className={"my-3"} orientation="left">Функциональность</Divider>
                <Select
                    value={itemType}
                    onChange={setItemType}
                    size={"large"}
                    className={"w-full"}
                    rootClassName={"w-full mb-3"}
                    options={[
                        { value: 0, label: 'Роль пользователя (Админки и т.д)' },
                        { value: 1, label: 'Предмет для покупки из магазина DarkRP (Vanilla)' },
                        { value: 2, label: 'Игровая модель игрока' },
                        { value: 3, label: 'Бесконечные патроны на все оружие' },
                        { value: 4, label: 'Доступ к SWEP для выдачи через [Q] меню' },
                    ]}
                />

                {itemType === 0 &&
                    <div className="flex flex-row gap-6 w-100">
                        <Form.Item<IFields>
                            label="Системный ИД группы"
                            name="usergroup"
                            className={"flex-1"}
                            extra="Вам необходимо указать ID группы из вашей админ системы"
                            rules={[{ required: true, message: 'Необходимо заполнить данный пункт' }]}
                        >
                            <Input size={"large"} />
                        </Form.Item>
                        <Form.Item<IFields>
                            label="Ваша админ система"
                            name="type_admin"
                            className={"flex-1"}
                            extra="Обязательно укажите вашу админ-систему!"
                            rules={[{ required: true, message: 'Необходимо заполнить данное поле' }]}
                        >
                            <Select
                                size={"large"}
                                options={[
                                    { value: 0, label: 'ULX' },
                                    { value: 1, label: 'bAdmin' },
                                    { value: 2, label: 'xAdmin' },
                                    { value: 3, label: 'xAdmin 2' },
                                    { value: 4, label: 'Evolve' },
                                    { value: 5, label: 'fAdmin' },
                                    { value: 6, label: 'ServerGuard' },
                                    { value: 7, label: 'SAM Admin Mod' },
                                ]}
                            />
                        </Form.Item>
                    </div>
                }

                {itemType === 1 &&
                    <div className="flex flex-row gap-6 w-100">
                        <Form.Item<IFields>
                            label="Системный ИД предмета из магазина"
                            name="darkrp_item"
                            className={"flex-1"}
                            extra="Вам необходимо указать ID предмета из DarkRP магазина"
                            rules={[{ required: true, message: 'Необходимо заполнить данный пункт' }]}
                        >
                            <Input size={"large"} />
                        </Form.Item>
                        <div className="flex-1"></div>
                    </div>
                }

                {itemType === 2 &&
                    <div className="flex flex-row gap-6 w-100">
                        <Form.Item<IFields>
                            label="Модель игрока"
                            name="pl_model"
                            className={"flex-1"}
                            extra="Укажите путь к модели которую вы хотите выдать игроку после покупки"
                            rules={[{ required: true, message: 'Необходимо заполнить данный пункт' }]}
                        >
                            <Input size={"large"} />
                        </Form.Item>
                    </div>
                }

                {itemType === 4 &&
                    <div className="flex flex-row gap-6 w-100">
                        <Form.Item<IFields>
                            label="Системный class SWEP'a"
                            name="weapon"
                            className={"flex-1"}
                            extra="Укажите class SWEP для выдачи доступка к получению предмета"
                            rules={[{ required: true, message: 'Необходимо заполнить данный пункт' }]}
                        >
                            <Input size={"large"} />
                        </Form.Item>
                        <div className="flex-1"></div>
                    </div>
                }

                <div className="flex flex-row-reverse">
                    <Form.Item className={"m-0 p-0"}>
                        <Button type="primary" htmlType="submit" size={"large"} className={"bg-blue-600"}>
                            Создать предмет
                        </Button>
                    </Form.Item>
                </div>
            </Form>
            {generated &&
                <div className="flex flex-col bg-neutral-950 rounded-lg mt-5 p-5 gap-5">
                    <Alert message="Ваш файл успешно создан!" type="success" showIcon />
                    <div className="flex flex-col text-neutral-400">
                        {textWithBreaks}
                    </div>
                    <div className="flex flex-row-reverse gap-2">
                        <Button onClick={() => {navigator.clipboard.writeText(toCopy)}} type="dashed" icon={<CopyOutlined />} size={"large"} />
                    </div>
                </div>
            }
        </>
    )
}
