"use client";
import React, {useEffect, useState} from "react";
import {Alert, Button, Divider, Form, InputNumber, message} from "antd";
import {CopyOutlined, DownloadOutlined} from "@ant-design/icons";
import {useRAPI} from "@/hooks/rapi.hook";

type IFields = {
    collectionID?: number;
};

export default function FormComponent() {
    const RAPI = useRAPI();
    const [generated, setGenerated] = useState(false);
    const [toCopy,setToCopy] = useState("")
    async function generateFile(formData: IFields) {
        setGenerated(false);
        try {
            let preparedString = `--[[ File generated by Physgun.ru tools website, original collection: ${formData.collectionID} ]]\n`;
            const data = await RAPI.request('/api/v1/workshop/collection_info', 'POST', formData);
            data.map((item:{id:string,title:string})=>{
                preparedString += `resource.AddWorkshop( "${item.id}" ) -- ${item.title}\n`;
            })
            setToCopy(preparedString)
            message.info('Успешная генерация!');
            setGenerated(true);
        } catch (e:any) {
            message.error(e.error);
        }
    }

    const textWithBreaks = toCopy
        .replace(/"([^"]+)"/g, '<span class="text-yellow-100">$&</span>')
        .replace(/resource/g, '<span class="text-gray-300">resource</span>')
        .replace(/AddWorkshop/g, '<span class="text-blue-300">AddWorkshop</span>')
        .replace(/--(.*)/g, '<span class="text-neutral-600">--$1</span>').split('\n').map((text, index) => (
            <React.Fragment key={index}>
                <div dangerouslySetInnerHTML={{__html:text}}/>
            </React.Fragment>
        ));

    const downloadBatFile = () => {
        const element = document.createElement("a");
        const file = new Blob([toCopy], {type: 'text/plain'});
        element.href = URL.createObjectURL(file);
        element.download = "resources.lua";
        document.body.appendChild(element); // Required for this to work in FireFox
        element.click();
    }

    return (
        <>
            <Form
                name="workshop"
                initialValues={{ remember: true }}
                autoComplete="off"
                onFinish={generateFile}
                layout="vertical"
            >

                <Divider className={"my-3"} orientation="left">Создать коллекцию</Divider>

                <div className="flex flex-row gap-6 w-100">
                    <Form.Item<IFields>
                        label="ИД коллекции Workshop"
                        name="collectionID"
                        className={"flex-1"}
                        extra="Крайне рекомендуют использовать Workshop, в качестве FastDL, создайте коллекцию в Steam и вставьте сюда ID данной коллекции."
                        rules={[{ required: true, message: 'Пожалуйста введите коллекцию' }]}
                    >
                        <InputNumber min="100" size={"large"} style={{width: "100%"}} />
                    </Form.Item>
                    <div className="flex-1"></div>
                    <div className="flex-1"></div>
                </div>

                <div className="flex flex-row-reverse">
                    <Form.Item className={"m-0 p-0"}>
                        <Button loading={RAPI.loading} type="primary" htmlType="submit" size={"large"} className={"bg-blue-600"}>
                            Создать код
                        </Button>
                    </Form.Item>
                </div>
            </Form>
            {generated &&
                <div className="flex flex-col bg-neutral-950 rounded-lg mt-5 p-5 gap-5">
                    <Alert message="Ваш файл успешно создан!" type="success" showIcon />
                    <div className="flex flex-col text-neutral-400">
                        {textWithBreaks}
                    </div>
                    <div className="flex flex-row-reverse gap-2">
                        <Button onClick={() => {downloadBatFile()}} type="dashed" icon={<DownloadOutlined />} size={"large"} />
                        <Button onClick={() => {navigator.clipboard.writeText(toCopy)}} type="dashed" icon={<CopyOutlined />} size={"large"} />
                    </div>
                </div>
            }
        </>
    )
}
